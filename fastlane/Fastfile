# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.51.0"

default_platform :ios

schemeName = 'TaipeiTravel'
infoPlistFileName = 'Info.plist'


plistPath = "TaipeiTravel/" + infoPlistFileName;
# 預設自動帶入日期
build = Time.new.strftime("%m%d")
releaseNoteName = Time.new.strftime("%m%d")

version = get_info_plist_value(path: plistPath, key: "CFBundleShortVersionString")
changelog = ''
autoBuildNumber = true

platform :ios do
  before_all do

  end
  lane :betaCI_TFS do
    puts "[TestCI] schemeName :" + schemeName
    set_info_plist_value(path: plistPath, key: "CFBundleVersion", value: build)
    # get_provisioning_profile(development: true)
    gym(scheme: schemeName,
        export_method: "development",
        include_symbols: true,
        include_bitcode: true)
  end

  lane :betaCI do
    puts "[TestCI] schemeName :" + schemeName
    set_info_plist_value(path: plistPath, key: "CFBundleVersion", value: build)
    #get_provisioning_profile(development: true)
    gym(scheme: schemeName,
        export_method: "development",
        include_symbols: true,
        include_bitcode: true)
    changelog = "No release note"
    filePath = "../ReleaseNote/" + "v" + version
    puts filePath
    if File.exist?(filePath)
        changelog = File.read(filePath)
        puts changelog
    end
    ipaPath = schemeName + ".ipa"
    puts "[TestCI] ipaPath :" + ipaPath

    if git_tag_exists(tag: "fastlane-builds/" + "v" + version + '.' + build)
      UI.message("Found the same tag🚀, add HHmm in suffix")
      build = build + Time.new.strftime("%H%M")
    end
    puts "[TestCI] build :" + build
    add_git_tag(
      tag: "fastlane-builds/" + "v" + version + '.' + build
    )
    #push_git_tags(tag: "fastlane-builds/" + "v" + version + '.' + build)
    puts "[TestCI] tag :" + "fastlane-builds/" + "v" + version + '.' + build
  end

  lane :beta do
    #clean_build_artifacts

    autoBuildNumber = prompt(
      text: "Need automatic build number?",
      boolean: true
    )

    # TODO: 如果是手動的話，應該要強制手動輸入change log
    if autoBuildNumber == false
      build = prompt(
        text: "build number: ",
        boolean: false
      )
      changelog = prompt(
        text: "Changelog: ",
        boolean: false,
        multi_line_end_keyword: "END"
      )
    end
    if autoBuildNumber == true
      hasChangeLog = prompt(
        text: "Need automatic changelog?",
        boolean: true
      )
      if hasChangeLog == true
        filePath = "../ReleaseNote/" + "v" + version + '.' + build
        changelog = File.read(filePath)
      end

      if hasChangeLog == false
        changelog = prompt(
          text: "Changelog: ",
          boolean: false,
          multi_line_end_keyword: "END"
        )
      end
    end

    puts changelog
    puts "automatic buildNumber: " + build

    puts schemeName
    puts version
    puts build
    puts changelog

    set_info_plist_value(path: plistPath, key: "CFBundleVersion", value: build)

    betaBuildAndArchive
    betaCrashlytics
    betaGitTag
  end
  lane :betaBuildAndArchive do

    #get_provisioning_profile(development: true)

    gym(scheme: schemeName,
        export_method: "development",
        include_symbols: true,
        include_bitcode: true)

  end


  lane :betaGitTag do

    if git_tag_exists(tag: "fastlane-builds/" + "v" + version + '.' + build)
      UI.message("Found the same tag🚀, add HHmm in suffix")
      build = build + '.' +Time.new.strftime("%H%M")
    end
    add_git_tag(
      tag: "fastlane-builds/" + "v" + version + '.' + build
    )

    push_git_tags(tag: "fastlane-builds/" + "v" + version + '.' + build)

    # reset_git_repo(force: true)
  end

  lane :betatest do


  end
  # You can define as many lanes as you want

  after_all do |lane|



  end

  error do |lane, exception|

    puts exception.to_s


  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
